                                               // LinkedList
#include <iostream>
using namespace std;

// Node class represents an element in the linked list
class Node {
    public:
        int data; // Data stored in the node
        Node* next; // Pointer to the next node

        // Constructor to initialize node with a value
        Node(int val) {
            data = val;
            next = NULL;
        }
};

// List class to manage linked list operations
class List {
    Node* head; // Pointer to the first node
    Node* tail; // Pointer to the last node

    public:
        // Constructor initializes an empty list
        List() {
            head = tail = NULL;
        }

        // Function to insert a node at the front of the list
        void push_front(int val) {
            Node* newNode = new Node(val);
            if (head == NULL) { // If list is empty
                head = tail = newNode;
                return;
            } else {
                newNode->next = head;
                head = newNode;
            }
        }
        
        // Function to insert a node at the end of the list
        void push_back(int val) {
            Node* newNode = new Node(val);
            if (head == NULL) { // If list is empty
                head = tail = newNode;
                return;
            } else {
                tail->next = newNode;
                tail = newNode;
            }
        } 
        
        // Function to remove the first node of the list
        void pop_front() {
            if (head == NULL) { // If list is empty
                cout << "List is empty" << endl;
                return;
            } else {
                Node* temp = head;
                head = head->next; // Move head to next node
                temp->next = NULL;
                delete temp; // Free memory
            }
        }
        
        // Function to remove the last node of the list
        void pop_back() {
            if (head == NULL) { // If list is empty
                cout << "List is empty\n";
                return;
            } else {
                Node* temp = head;
                while (temp->next != tail) { // Traverse to second last node
                    temp = temp->next;
                }
                temp->next = NULL; // Remove link to last node
                delete tail; // Free memory
                tail = temp; // Update tail pointer
            }
        }
        
        // Function to insert a node at a specific position
        void insert(int val, int pos) {
            if (pos < 0) { // Invalid position check
                cout << "Invalid pos\n";
                return;
            }
            if (pos == 0) { // Insert at front
                push_front(val);
                return;
            }
            Node* temp = head;
            for (int i = 0; i < pos - 1; i++) { // Traverse to the desired position
                if (temp == NULL) { // If position is out of bounds
                    cout << "Invalid pos\n";
                    return;
                }
                temp = temp->next;
            }
            Node* newNode = new Node(val);
            newNode->next = temp->next;
            temp->next = newNode;
        }
        
        // Function to search for a value in the list and return its position
        int search(int key) {
            Node* temp = head;
            int idx = 0;
            while (temp != NULL) { // Traverse the list
                if (temp->data == key) { // If key is found
                    return idx;
                }
                temp = temp->next;
                idx++;
            }
            return -1; // Key not found
        }

        // Function to print the linked list
        void printLL() {
            Node* temp = head;
            while (temp != NULL) { // Traverse the list
                cout << temp->data << "->";
                temp = temp->next;
            }
            cout << "NULL" << endl;
        }
};

// Main function to demonstrate linked list operations
int main() {
    List ll;  // Create a linked list object
    
    ll.push_front(3); // Insert 3 at the front
    ll.push_front(2); // Insert 2 at the front
    ll.push_front(1); // Insert 1 at the front
    
    

    ll.printLL(); // Print the linked list
    
    cout << ll.search(2) << endl; // Search for value 2 and print its position

    return 0;
}
